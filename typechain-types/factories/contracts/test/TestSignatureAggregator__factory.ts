/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestSignatureAggregator,
  TestSignatureAggregatorInterface,
} from "../../../contracts/test/TestSignatureAggregator";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "entryPoint",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "delay",
        type: "uint32",
      },
    ],
    name: "addStake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation[]",
        name: "userOps",
        type: "tuple[]",
      },
    ],
    name: "aggregateSignatures",
    outputs: [
      {
        internalType: "bytes",
        name: "aggregatedSignature",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation[]",
        name: "userOps",
        type: "tuple[]",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "validateSignatures",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "",
        type: "tuple",
      },
    ],
    name: "validateUserOpSignature",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234610016576104df908161001c8239f35b600080fdfe60406080815260048036101561001457600080fd5b600091823560e01c8063275e2d7914610313578063451711591461026d57806364c530cd146101f25763e3563a4f1461004c57600080fd5b346101ee57806003193601126101ee5767ffffffffffffffff823581811161014d5761007b90369085016103bf565b9190602435918083116101ea57366023840112156101ea57828601359081116101ea57808301913660248401116101e65793879488915b8083106101ba575050506020036101515781602091031261014d5760240135036100da578280f35b90602060a492519162461bcd60e51b8352820152604160248201527f546573745369676e617475726556616c696461746f723a20616767726567617460448201527f6564207369676e6174757265206d69736d6174636820286e6f6e63652073756d6064820152602960f81b6084820152fd5b8480fd5b835162461bcd60e51b8152602081870152602860248201527f546573745369676e617475726556616c696461746f723a20736967206d75737460448201527f2062652075696e740000000000000000000000000000000000000000000000006064820152608490fd5b9091956101d96101df9160206101d18a8688610463565b01359061049c565b9661043e565b91906100b2565b8780fd5b8680fd5b8280fd5b5082903461026957600319916020368401126102665767ffffffffffffffff9284358481116101ee579061016091360301126102665781519260208401908111848210176102515761024d94508252825251918291826103f5565b0390f35b604185634e487b7160e01b6000525260246000fd5b80fd5b5080fd5b50806003193601126101ee5781359173ffffffffffffffffffffffffffffffffffffffff831680930361030f578360243563ffffffff811680910361026957843b15610269576024845180968193621cb65b60e51b83528683015234905af18015610305576102da578380f35b67ffffffffffffffff83116102f25750523880808380f35b634e487b7160e01b845260419052602483fd5b82513d86823e3d90fd5b8380fd5b5082903461026957602091826003193601126102665767ffffffffffffffff9380358581116101ee5761034990369083016103bf565b83959184915b80831061039c575050508351948186015284528284019484861090861117610389575050829052603f199061038481846103f5565b030190f35b634e487b7160e01b825260419052602490fd5b9091966103b26103b891856101d18b8688610463565b9761043e565b919061034f565b9181601f840112156103f05782359167ffffffffffffffff83116103f0576020808501948460051b0101116103f057565b600080fd5b6020808252825181830181905290939260005b82811061042a57505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610408565b600019811461044d5760010190565b634e487b7160e01b600052601160045260246000fd5b91908110156104865760051b8101359061015e19813603018212156103f0570190565b634e487b7160e01b600052603260045260246000fd5b9190820180921161044d5756fea264697066735822122012e34ae8b01e9c9dfcb8c15a01677e7d6bde388217b2d7cf71876d3509c2243f64736f6c63430008110033";

type TestSignatureAggregatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestSignatureAggregatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestSignatureAggregator__factory extends ContractFactory {
  constructor(...args: TestSignatureAggregatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestSignatureAggregator> {
    return super.deploy(overrides || {}) as Promise<TestSignatureAggregator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestSignatureAggregator {
    return super.attach(address) as TestSignatureAggregator;
  }
  override connect(signer: Signer): TestSignatureAggregator__factory {
    return super.connect(signer) as TestSignatureAggregator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestSignatureAggregatorInterface {
    return new utils.Interface(_abi) as TestSignatureAggregatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestSignatureAggregator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestSignatureAggregator;
  }
}
