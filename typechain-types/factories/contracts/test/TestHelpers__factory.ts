/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestHelpers,
  TestHelpersInterface,
} from "../../../contracts/test/TestHelpers";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "validationData",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "paymasterValidationData",
        type: "uint256",
      },
    ],
    name: "intersectTimeRange",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "aggregator",
            type: "address",
          },
          {
            internalType: "uint48",
            name: "validAfter",
            type: "uint48",
          },
          {
            internalType: "uint48",
            name: "validUntil",
            type: "uint48",
          },
        ],
        internalType: "struct ValidationData",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "sigFailed",
        type: "bool",
      },
      {
        internalType: "uint48",
        name: "validUntil",
        type: "uint48",
      },
      {
        internalType: "uint48",
        name: "validAfter",
        type: "uint48",
      },
    ],
    name: "packValidationData",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "aggregator",
            type: "address",
          },
          {
            internalType: "uint48",
            name: "validAfter",
            type: "uint48",
          },
          {
            internalType: "uint48",
            name: "validUntil",
            type: "uint48",
          },
        ],
        internalType: "struct ValidationData",
        name: "data",
        type: "tuple",
      },
    ],
    name: "packValidationDataStruct",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "validationData",
        type: "uint256",
      },
    ],
    name: "parseValidationData",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "aggregator",
            type: "address",
          },
          {
            internalType: "uint48",
            name: "validAfter",
            type: "uint48",
          },
          {
            internalType: "uint48",
            name: "validUntil",
            type: "uint48",
          },
        ],
        internalType: "struct ValidationData",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234610016576103b0908161001c8239f35b600080fdfe604060808152600436101561001357600080fd5b600090813560e01c806324d3cde6146102345780634fe5f5cf1461013d578063a4b2282e146100d55763b059e2fa1461004b57600080fd5b346100d15760603660031901126100d1576004359081151582036100cd57916020926100756102e4565b9161007e6102fe565b93156100b1575060ff65ffffffffffff60a01b6001600160d01b03196001935b519560d01b169360a01b16911617178152f35b65ffffffffffff60a01b6001600160d01b031960ff929361009e565b8280fd5b5080fd5b50346100d15760203660031901126100d157610139906100f3610313565b506100ff600435610330565b905191829182919091604060608201936001600160a01b0381511683528165ffffffffffff91826020820151166020860152015116910152565b0390f35b50346100d157806003193601126100d1576101399061015a610313565b50610163610313565b5061016f600435610330565b9061017b602435610330565b916001600160a01b039283825116938415610229575b65ffffffffffff92839182868160208501511693015116938387816020840151169201511690808410610221575b50808511610219575b506101d16102ae565b9616865216602085015216818301525191829182919091604060608201936001600160a01b0381511683528165ffffffffffff91826020820151166020860152015116910152565b9350886101c8565b9250896101bf565b815181169450610191565b50346100d15760603660031901126100d15761024e6102ae565b906004356001600160a01b038116908181036102aa5760209450835265ffffffffffff60a01b6001600160d01b0319836102866102e4565b9586888201526102946102fe565b9586910152519460d01b169260a01b1617178152f35b8480fd5b604051906060820182811067ffffffffffffffff8211176102ce57604052565b634e487b7160e01b600052604160045260246000fd5b6024359065ffffffffffff821682036102f957565b600080fd5b6044359065ffffffffffff821682036102f957565b61031b6102ae565b90600082526000602083015260006040830152565b610338610313565b5065ffffffffffff808260a01c168015610373575b6103556102ae565b926001600160a01b038116845260d01c602084015216604082015290565b508061034d56fea2646970667358221220a4f1ec08f9c46277d60842cec04067c1ac0542098c827819238a1b4f9648dfb264736f6c63430008110033";

type TestHelpersConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestHelpersConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestHelpers__factory extends ContractFactory {
  constructor(...args: TestHelpersConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestHelpers> {
    return super.deploy(overrides || {}) as Promise<TestHelpers>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestHelpers {
    return super.attach(address) as TestHelpers;
  }
  override connect(signer: Signer): TestHelpers__factory {
    return super.connect(signer) as TestHelpers__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestHelpersInterface {
    return new utils.Interface(_abi) as TestHelpersInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestHelpers {
    return new Contract(address, _abi, signerOrProvider) as TestHelpers;
  }
}
