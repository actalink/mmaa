/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestPaymasterAcceptAll,
  TestPaymasterAcceptAllInterface,
} from "../../../contracts/test/TestPaymasterAcceptAll";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "_entryPoint",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "unstakeDelaySec",
        type: "uint32",
      },
    ],
    name: "addStake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "entryPoint",
    outputs: [
      {
        internalType: "contract IEntryPoint",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDeposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IPaymaster.PostOpMode",
        name: "mode",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "context",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "actualGasCost",
        type: "uint256",
      },
    ],
    name: "postOp",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unlockStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "userOpHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "maxCost",
        type: "uint256",
      },
    ],
    name: "validatePaymasterUserOp",
    outputs: [
      {
        internalType: "bytes",
        name: "context",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "validationData",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
    ],
    name: "withdrawStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a0346100ba57601f6109b038819003918201601f19168301916001600160401b038311848410176100bf578084926020946040528339810103126100ba57516001600160a01b03811681036100ba57610058336100d5565b6080523332036100ac575b604051610893908161011d823960805181818161028801528181610328015281816103f501528181610472015281816104e00152818161065f015281816106eb01526107f00152f35b6100b5326100d5565b610063565b600080fd5b634e487b7160e01b600052604160045260246000fd5b600080546001600160a01b039283166001600160a01b03198216811783559216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a356fe60406080815260048036101561001457600080fd5b600091823560e01c80630396cb60146106bb57838163205c28781461063157508063715018a6146105ca5780638da5cb5b146105a4578063a9a2340914610508578063b0d691fe146104c057838163bb9fe6bf1461044d578163c23a5cea146103c657508063c399ec88146102fe57838163d0e30db01461027057508063f2fde38b146101825763f465c77e146100aa57600080fd5b3461017e5760609160031993838536011261017b5767ffffffffffffffff94823586811161017e5790610160913603011261017b576100e76107e6565b60443561303903610175576001905b83519560209384880191821188831017610160575084939291969452858452825195869484865280518095870152815b85811061014a57505084840186015260ff1690830152601f01601f19168101030190f35b8181018501518982018901528896508401610126565b604190634e487b7160e01b6000525260246000fd5b806100f6565b80fd5b8280fd5b503461017e57602036600319011261017e578135916001600160a01b039182841680940361026c576101b2610764565b83156102035750506000548273ffffffffffffffffffffffffffffffffffffffff19821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8480fd5b808484826003193601126102fa576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691823b156102f5578390602483518095819363b760faf960e01b8352309083015234905af19081156102ec57506102dc5750f35b6102e5906107bc565b61017b5780f35b513d84823e3d90fd5b505050fd5b5050fd5b503461017e578260031936011261017e5780516370a0823160e01b815230838201526020816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9283156103bc57849361036a575b6020848451908152f35b909192506020903d82116103b4575b601f8201601f191683019067ffffffffffffffff8211848310176101605750602091839185528101031261017e576020925051903880610360565b3d9150610379565b82513d86823e3d90fd5b808484346102fa5760203660031901126102fa576103e2610749565b6103ea610764565b6001600160a01b03807f000000000000000000000000000000000000000000000000000000000000000016803b15610449578592836024928651978895869463611d2e7560e11b865216908401525af19081156102ec57506102dc5750f35b8580fd5b808484346102fa57826003193601126102fa57610468610764565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691823b156102f557815163bb9fe6bf60e01b81529284918491829084905af19081156102ec57506102dc5750f35b838234610504578160031936011261050457602090516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b5080fd5b50913461017b57606036600319011261017b5760038235101561017b5760243567ffffffffffffffff80821161017e573660238301121561017e578184013590811161017e573691016024011161017b575060206064926105676107e6565b5162461bcd60e51b815291820152600d60248201527f6d757374206f76657272696465000000000000000000000000000000000000006044820152fd5b8382346105045781600319360112610504576001600160a01b0360209254169051908152f35b833461017b578060031936011261017b576105e3610764565b60006001600160a01b03815473ffffffffffffffffffffffffffffffffffffffff1981168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b808484346102fa57806003193601126102fa5761064c610749565b610654610764565b6001600160a01b03807f000000000000000000000000000000000000000000000000000000000000000016803b15610449578592836044928651978895869463040b850f60e31b8652169084015260243560248401525af19081156102ec57506102dc5750f35b50602036600319011261017e5782823563ffffffff8116809103610504576106e1610764565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001693843b1561017e5760249084519586938492621cb65b60e51b845283015234905af19081156102ec575061073d575080f35b610746906107bc565b80f35b600435906001600160a01b038216820361075f57565b600080fd5b6001600160a01b0360005416330361077857565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b67ffffffffffffffff81116107d057604052565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016330361081857565b60405162461bcd60e51b815260206004820152601560248201527f53656e646572206e6f7420456e747279506f696e7400000000000000000000006044820152606490fdfea2646970667358221220282efbfec46443d2ea6b8593c5cd5354431ae9f11bae5165bc3f0f21b79ea3bd64736f6c63430008110033";

type TestPaymasterAcceptAllConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestPaymasterAcceptAllConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestPaymasterAcceptAll__factory extends ContractFactory {
  constructor(...args: TestPaymasterAcceptAllConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _entryPoint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestPaymasterAcceptAll> {
    return super.deploy(
      _entryPoint,
      overrides || {}
    ) as Promise<TestPaymasterAcceptAll>;
  }
  override getDeployTransaction(
    _entryPoint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_entryPoint, overrides || {});
  }
  override attach(address: string): TestPaymasterAcceptAll {
    return super.attach(address) as TestPaymasterAcceptAll;
  }
  override connect(signer: Signer): TestPaymasterAcceptAll__factory {
    return super.connect(signer) as TestPaymasterAcceptAll__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestPaymasterAcceptAllInterface {
    return new utils.Interface(_abi) as TestPaymasterAcceptAllInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestPaymasterAcceptAll {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestPaymasterAcceptAll;
  }
}
