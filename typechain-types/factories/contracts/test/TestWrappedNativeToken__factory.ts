/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestWrappedNativeToken,
  TestWrappedNativeTokenInterface,
} from "../../../contracts/test/TestWrappedNativeToken";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60803462000324576040906001600160401b03908083018281118282101762000224578352601481526020917f57726170706564204e617469766520546f6b656e00000000000000000000000083830152835184810181811083821117620002245785526005815264776e546f6b60d81b84820152825182811162000224576003918254916001958684811c9416801562000319575b8885101462000303578190601f94858111620002ad575b50889085831160011462000246576000926200023a575b505060001982861b1c191690861b1783555b8051938411620002245760049586548681811c9116801562000219575b828210146200020457838111620001b9575b50809285116001146200014b57509383949184926000956200013f575b50501b92600019911b1c19161790555b51610bbd90816200032a8239f35b01519350388062000121565b92919084601f1981168860005285600020956000905b898383106200019e575050501062000183575b50505050811b01905562000131565b01519060f884600019921b161c191690553880808062000174565b85870151895590970196948501948893509081019062000161565b87600052816000208480880160051c820192848910620001fa575b0160051c019087905b828110620001ed57505062000104565b60008155018790620001dd565b92508192620001d4565b602288634e487b7160e01b6000525260246000fd5b90607f1690620000f2565b634e487b7160e01b600052604160045260246000fd5b015190503880620000c3565b90889350601f19831691876000528a6000209260005b8c8282106200029657505084116200027d575b505050811b018355620000d5565b015160001983881b60f8161c191690553880806200026f565b8385015186558c979095019493840193016200025c565b90915085600052886000208580850160051c8201928b8610620002f9575b918a91869594930160051c01915b828110620002e9575050620000ac565b600081558594508a9101620002d9565b92508192620002cb565b634e487b7160e01b600052602260045260246000fd5b93607f169362000095565b600080fdfe608060408181526004918236101561002a575b505050361561002057600080fd5b610028610ae9565b005b600092833560e01c91826306fdde031461068457508163095ea7b31461065a57816318160ddd1461063b57816323b872dd146105705781632e1a7d4d146103c0578163313ce567146103a4578163395093511461035557816370a082311461031f57816395d89b411461021c578163a457c2d71461015e57508063a9059cbb1461012e578063d0e30db0146101145763dd62ed3e146100c95780610012565b34610110578060031936011261011057806020926100e56107be565b6100ed6107d9565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b828060031936011261012b57610128610ae9565b80f35b80fd5b503461011057806003193601126101105760209061015761014d6107be565b602435903361084a565b5160018152f35b9050823461012b578260031936011261012b576101796107be565b91836024359233815260016020528181206001600160a01b03861682526020522054908282106101b35760208561015785850387336109e7565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152fd5b838334610110578160031936011261011057805191809380549160019083821c92828516948515610315575b6020958686108114610302578589529081156102de5750600114610286575b6102828787610278828c03836107ef565b5191829182610775565b0390f35b81529295507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8284106102cb57505050826102829461027892820101948680610267565b80548685018801529286019281016102ad565b60ff19168887015250505050151560051b8301019250610278826102828680610267565b634e487b7160e01b845260228352602484fd5b93607f1693610248565b50503461011057602036600319011261011057806020926001600160a01b036103466107be565b16815280845220549051908152f35b50503461011057806003193601126101105761015760209261039d6103786107be565b91338152600186528481206001600160a01b0384168252865284602435912054610827565b90336109e7565b5050346101105781600319360112610110576020905160128152f35b9190503461056c5760209081600319360112610568578235331561051c57338552848352818520548181106104ce5785808381948294338452838952038683205580600254036002558186518281527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef893392a3335af13d156104c9573d67ffffffffffffffff81116104b657825190610463601f8201601f19168601836107ef565b815285843d92013e5b15610475578380f35b5162461bcd60e51b815291820152600f60248201527f7472616e73666572206661696c65640000000000000000000000000000000000604482015260649150fd5b634e487b7160e01b865260418552602486fd5b61046c565b50505162461bcd60e51b815291820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260849150fd5b505162461bcd60e51b815291820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260849150fd5b8380fd5b8280fd5b839150346101105760603660031901126101105761058c6107be565b6105946107d9565b9184604435946001600160a01b0384168152600160205281812033825260205220549060001982036105cf575b60208661015787878761084a565b8482106105f857509183916105ed60209695610157950333836109e7565b9193948193506105c1565b606490602087519162461bcd60e51b8352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b5050346101105781600319360112610110576020906002549051908152f35b50503461011057806003193601126101105760209061015761067a6107be565b60243590336109e7565b92915034610568578360031936011261056857600354600181811c918690828116801561076b575b6020958686108214610758575084885290811561073657506001146106dd575b6102828686610278828b03836107ef565b929550600383527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8284106107235750505082610282946102789282010194386106cc565b8054868501880152928601928101610706565b60ff191687860152505050151560051b830101925061027882610282386106cc565b634e487b7160e01b845260229052602483fd5b93607f16936106ac565b6020808252825181830181905290939260005b8281106107aa57505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610788565b600435906001600160a01b03821682036107d457565b600080fd5b602435906001600160a01b03821682036107d457565b90601f8019910116810190811067ffffffffffffffff82111761081157604052565b634e487b7160e01b600052604160045260246000fd5b9190820180921161083457565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0380911691821561097c571691821561092b576000828152806020526040812054918083106108c057604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608490fd5b6001600160a01b03809116918215610a985716918215610a485760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b3315610b4257610afb34600254610827565b600255336000526000602052604060002034815401905560405134815260007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a3565b60405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fdfea264697066735822122007e342a050e443f32369b6ce2ccb04b022fbd44be971aae5cf59f5cfbfe3012e64736f6c63430008110033";

type TestWrappedNativeTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestWrappedNativeTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestWrappedNativeToken__factory extends ContractFactory {
  constructor(...args: TestWrappedNativeTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestWrappedNativeToken> {
    return super.deploy(overrides || {}) as Promise<TestWrappedNativeToken>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestWrappedNativeToken {
    return super.attach(address) as TestWrappedNativeToken;
  }
  override connect(signer: Signer): TestWrappedNativeToken__factory {
    return super.connect(signer) as TestWrappedNativeToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestWrappedNativeTokenInterface {
    return new utils.Interface(_abi) as TestWrappedNativeTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestWrappedNativeToken {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestWrappedNativeToken;
  }
}
