/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  BLSSignatureAggregator,
  BLSSignatureAggregatorInterface,
} from "../../../../contracts/samples/bls/BLSSignatureAggregator";

const _abi = [
  {
    inputs: [],
    name: "BLS_DOMAIN",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "N",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "entryPoint",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "delay",
        type: "uint32",
      },
    ],
    name: "addStake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation[]",
        name: "userOps",
        type: "tuple[]",
      },
    ],
    name: "aggregateSignatures",
    outputs: [
      {
        internalType: "bytes",
        name: "aggregatedSignature",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "getTrailingPublicKey",
    outputs: [
      {
        internalType: "uint256[4]",
        name: "publicKey",
        type: "uint256[4]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
    ],
    name: "getUserOpHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
    ],
    name: "getUserOpPublicKey",
    outputs: [
      {
        internalType: "uint256[4]",
        name: "publicKey",
        type: "uint256[4]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
    ],
    name: "userOpToMessage",
    outputs: [
      {
        internalType: "uint256[2]",
        name: "",
        type: "uint256[2]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation[]",
        name: "userOps",
        type: "tuple[]",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "validateSignatures",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
    ],
    name: "validateUserOpSignature",
    outputs: [
      {
        internalType: "bytes",
        name: "sigForUserOp",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100165761172a908161001c8239f35b600080fdfe60806040526004361015610013575b600080fd5b6000803560e01c9081629d9250146100dd57508063275e2d79146100d457806340864431146100cb57806345171159146100c257806357f09b72146100b957806364c530cd146100b0578063a6193531146100a7578063b7620eb41461009e578063c9e525df146100955763e3563a4f1461008d57600080fd5b61000e61082d565b5061000e610803565b5061000e6107c6565b5061000e610798565b5061000e61066a565b5061000e610644565b5061000e610579565b5061000e610513565b5061000e61019f565b346101175780600319360112610117577fd84c4373167c517e9ccd66803f86d8a4f49e7e1315a7a73b516affea7428f82b60805260206080f35b80fd5b9181601f8401121561000e5782359167ffffffffffffffff831161000e576020808501948460051b01011161000e57565b919082519283825260005b848110610177575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610156565b90602061019c92818152019061014b565b90565b503461000e5760208060031936011261000e5760043567ffffffffffffffff811161000e576101d290369060040161011a565b916101dc83610ac9565b926101ea6040519485610328565b808452601f1992836101fb83610ac9565b018360005b8281106102b65750505060005b855181101561026d578061023e61023661022b610268948787610bee565b610140810190611102565b8101906111eb565b61024661034a565b918252868201526102578289610c2a565b526102628188610c2a565b50610bbb565b61020d565b6102b2846102a68761027e8a611201565b8051908401516040805195860192835260208301919091528491015b03908101835282610328565b6040519182918261018b565b0390f35b6102be6111b3565b82828a010152018490610200565b50634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff8211176102ff57604052565b6103076102cc565b604052565b6080810190811067ffffffffffffffff8211176102ff57604052565b90601f8019910116810190811067ffffffffffffffff8211176102ff57604052565b60405190610357826102e3565b565b60405190610160820182811067ffffffffffffffff8211176102ff57604052565b604051906103578261030c565b6001600160a01b0381160361000e57565b359061035782610387565b81601f8201121561000e5780359067ffffffffffffffff82116103fb575b604051926103d9601f8401601f191660200185610328565b8284526020838301011161000e57816000926020809301838601378301015290565b6104036102cc565b6103c1565b91906101608382031261000e5761041d610359565b9261042781610398565b84526020810135602085015260408101359167ffffffffffffffff9283811161000e57816104569184016103a3565b6040860152606082013583811161000e57816104739184016103a3565b60608601526080820135608086015260a082013560a086015260c082013560c086015260e082013560e086015261010080830135908601526101208083013584811161000e57826104c59185016103a3565b90860152610140928383013590811161000e576104e292016103a3565b90830152565b602060031982011261000e576004359067ffffffffffffffff821161000e5761019c91600401610408565b503461000e5761054c610525366104e8565b60408051610532816102e3565b369037610546610541826108c0565b6110df565b90610eb5565b60405190600090825b6002831061056257604084f35b600190825181526020809101920192019190610555565b50600060403660031901126101175760043561059481610387565b816024359163ffffffff8316809303610612576001600160a01b031691823b1561061257602460405180948193621cb65b60e51b8352600483015234905af18015610605575b6105e2575080f35b67ffffffffffffffff81116105f8575b60405280f35b6106006102cc565b6105f2565b61060d6108b3565b6105da565b5080fd5b6080810192916000915b6004831061062d57505050565b600190825181526020809101920192019190610620565b503461000e576102b261065e610659366104e8565b6108c0565b60405191829182610616565b503461000e5760031960203682011261000e576004359067ffffffffffffffff821161000e576101608260040191833603011261000e5761071e6106c06106b8610144610752950184611102565b810190610a7a565b916107146106ee6106d46106593685610408565b926106e96106e1856110df565b913690610408565b610eb5565b9161070a6040519563ebbdac9160e01b87526004870190610c64565b6044850190610c8c565b60c4830190610c64565b6020816101048173__$b745eded4b1aee1100521038d570dd85f1$__5af490811561078b575b60009161075d575b50611135565b6102b26102a6611181565b61077e915060203d8111610784575b6107768183610328565b810190610c4c565b3861074c565b503d61076c565b6107936108b3565b610744565b503461000e5760206107be6107ac366104e8565b6107b8610541826108c0565b90610fdd565b604051908152f35b503461000e57602036600319011261000e5760043567ffffffffffffffff811161000e5761065e6107fe6102b29236906004016103a3565b6109a2565b503461000e57600036600319011261000e5760206040516000805160206116d58339815191528152f35b503461000e57604036600319011261000e5767ffffffffffffffff60043581811161000e5761086090369060040161011a565b91906024359282841161000e573660238501121561000e57836004013592831161000e57366024848601011161000e57602461089d940191610da7565b005b604051906108ac8261030c565b6080368337565b506040513d6000823e3d90fd5b604051906108cd8261030c565b6080809236903760408101518051909190156108ee575061019c91506109a2565b516040516370157dd760e11b815291508290829060049082906001600160a01b031661c350fa918215610995575b60009261092857505090565b803d821161098e575b61093b8184610328565b820191818184031261098a5782601f8201121561098a576040519361095f8561030c565b849282019384116101175750905b82821061097a5750505090565b815181526020918201910161096d565b8380fd5b503d610931565b61099d6108b3565b61091c565b906040516109af8161030c565b60803682378092805160808111156109e95760609101605f198101518352603f198101516020840152601f19810151604084015251910152565b60405162461bcd60e51b815260206004820152601660248201527f6461746120746f6f2073686f727420666f7220736967000000000000000000006044820152606490fd5b15610a3557565b60405162461bcd60e51b815260206004820152601660248201527f424c533a20696e76616c6964207369676e6174757265000000000000000000006044820152606490fd5b9060408282031261000e5780601f8301121561000e5760405191610a9d836102e3565b82906040810192831161000e57905b828210610ab95750505090565b8135815260209182019101610aac565b60209067ffffffffffffffff8111610ae3575b60051b0190565b610aeb6102cc565b610adc565b90610afa82610ac9565b604090610b0982519182610328565b8381528093610b1a601f1991610ac9565b019160005b838110610b2c5750505050565b6020908251610b3a8161030c565b608036823782828601015201610b1f565b90610b5582610ac9565b6040610b6381519283610328565b8382528193610b74601f1991610ac9565b019160005b838110610b865750505050565b6020908351610b94816102e3565b8436823782828501015201610b79565b50634e487b7160e01b600052601160045260246000fd5b6001906000198114610bcb570190565b610bd3610ba4565b0190565b50634e487b7160e01b600052603260045260246000fd5b9190811015610c12575b60051b8101359061015e198136030182121561000e570190565b610c1a610bd7565b610bf8565b61019c903690610408565b6020918151811015610c3f575b60051b010190565b610c47610bd7565b610c37565b9081602091031261000e5751801515810361000e5790565b6000915b60028310610c7557505050565b600190825181526020809101920192019190610c68565b6000915b60048310610c9d57505050565b600190825181526020809101920192019190610c90565b91608092610cc58185810194610c64565b6040938085830152825180945260a08201936020809401916000905b828210610d35575050505060608184039101528080855193848152019401926000905b838210610d1357505050505090565b9091929394838282610d286001948a51610c64565b0196019493920190610d04565b909192969495868282610d4b6001948c51610c8c565b9799970197960193920190610ce1565b15610d6257565b60405162461bcd60e51b815260206004820152601e60248201527f424c533a2076616c69646174655369676e617475726573206661696c656400006044820152606490fd5b91610db991936106b860408214610a2e565b610dc283610af0565b91610dcc84610b4b565b9360005b818110610e5a575050506103579291602091610e006040519485938493639141376360e01b855260048501610cb4565b038173__$b745eded4b1aee1100521038d570dd85f1$__5af4908115610e4d575b600091610e2f575b50610d5b565b610e47915060203d8111610784576107768183610328565b38610e29565b610e556108b3565b610e21565b80610ea6610e74610e6f610eb0948688610bee565b610c1f565b610e7d816108c0565b610e87848a610c2a565b52610e928389610c2a565b50610546610ea0848a610c2a565b516110df565b6102578289610c2a565b610dd0565b90610ed190604092838051610ec9816102e3565b369037610fdd565b610f3082805160209384820152838152610eea816102e3565b81518093819263a850a90960e01b83527fd84c4373167c517e9ccd66803f86d8a4f49e7e1315a7a73b516affea7428f82b6004840152846024840152604483019061014b565b038173__$b745eded4b1aee1100521038d570dd85f1$__5af4928315610fd0575b600093610f5f575b50505090565b803d8211610fc9575b610f728184610328565b8201918181840312610fc55782601f82011215610fc557815194610f95866102e3565b859282019384116101175750905b828210610fb65750505050388080610f59565b81518152908301908301610fa3565b8480fd5b503d610f68565b610fd86108b3565b610f51565b906110d9610ff283516001600160a01b031690565b926020938461109581840151936040810151838151910120906060810151848151910120608082015160a083015160c08401519160e085015193610120610100870151960151898151910120966040519b8c9a8b019b8c9693909a999895926101209895926001600160a01b036101408a019d168952602089015260408801526060870152608086015260a085015260c084015260e08301526101008201520152565b03916110a9601f1993848101835282610328565b5190206040805195860191825260208201949094523093810193909352466060840152919291826080850161029a565b51902090565b6040516110d9816110f4602082019485610616565b03601f198101835282610328565b903590601e198136030182121561000e570180359067ffffffffffffffff821161000e5760200191813603831361000e57565b1561113c57565b60405162461bcd60e51b815260206004820152600e60248201527f424c533a2077726f6e67207369670000000000000000000000000000000000006044820152606490fd5b604051906020820182811067ffffffffffffffff8211176111a6575b60405260008252565b6111ae6102cc565b61119d565b604051906040820182811067ffffffffffffffff8211176111de575b60405260006020838281520152565b6111e66102cc565b6111cf565b919082604091031261000e576020823592013590565b9061120a6111b3565b825115611396575b602090818401918083515193865115611389575b51015192600193845b875186101561127857916112639161126e949361124c888b610c2a565b5151918561125a8a8d610c2a565b51015193611420565b949193909395610bbb565b949192909361122f565b91929450929550808015159081611370575b5080611368575b156113235760009060016000805160206116d5833981519152825b6112d9575050506000805160206116d5833981519152929181848082819509809309885209900990830152565b806113156000805160206116d58339815191526112fd8661131b95989697986116a1565b9461130a828888096113ef565b9008949580946116c1565b90611413565b9190826112ac565b60405162461bcd60e51b815260048101859052600e60248201527f496e76616c6964206e756d6265720000000000000000000000000000000000006044820152606490fd5b506001611291565b6000805160206116d5833981519152915014153861128a565b611391610bd7565b611226565b61139e610bd7565b611212565b156113aa57565b60405162461bcd60e51b815260206004820152601e60248201527f557365206a6163446f75626c652066756e6374696f6e20696e737465616400006044820152606490fd5b906000805160206116d583398151915291820391821161140b57565b610357610ba4565b9190820391821161140b57565b949290919394801580611699575b61168e57811580611686575b61167d576114e261144961089f565b966000805160206116d583398151915280888009808a52880960208901526000805160206116d58339815191526040890195600187528160608b01956001875261149161037a565b9851900994858852519009906000805160206116d58339815191528060208801968488528b519009916020604089019b848d52015190099060608701948286521491821592611672575b50506113a3565b6114ea61089f565b955183516114f7906113ef565b6000805160206116d583398151915291088652518151611516906113ef565b6000805160206116d58339815191529108602086019281845286516000805160206116d583398151915281800960408901918183526000805160206116d5833981519152910992606089019380855261156e906113ef565b90806000805160206116d58339815191529109906000805160206116d58339815191529108825182516000805160206116d583398151915291096000805160206116d5833981519152906002096115c4906113ef565b6000805160206116d583398151915291089451915190516000805160206116d583398151915291096115f5856113ef565b6000805160206116d583398151915291086000805160206116d58339815191529109915190516000805160206116d58339815191529109611635906113ef565b6000805160206116d58339815191529108935190939260016000805160206116d583398151915291096000805160206116d5833981519152910990565b1415905038806114db565b91945050929190565b50851561143a565b509392506001919050565b50821561142e565b81156116ab570490565b634e487b7160e01b600052601260045260246000fd5b8181029291811591840414171561140b5756fe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a264697066735822122033f6bedf6bc82a541b734f20f6372dcf8f52a37e20e6e1eb2a25af24f3c6323964736f6c63430008110033";

type BLSSignatureAggregatorConstructorParams =
  | [
      linkLibraryAddresses: BLSSignatureAggregatorLibraryAddresses,
      signer?: Signer
    ]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BLSSignatureAggregatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class BLSSignatureAggregator__factory extends ContractFactory {
  constructor(...args: BLSSignatureAggregatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        BLSSignatureAggregator__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: BLSSignatureAggregatorLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$b745eded4b1aee1100521038d570dd85f1\\$__", "g"),
      linkLibraryAddresses["contracts/samples/bls/lib/BLSOpen.sol:BLSOpen"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BLSSignatureAggregator> {
    return super.deploy(overrides || {}) as Promise<BLSSignatureAggregator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BLSSignatureAggregator {
    return super.attach(address) as BLSSignatureAggregator;
  }
  override connect(signer: Signer): BLSSignatureAggregator__factory {
    return super.connect(signer) as BLSSignatureAggregator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BLSSignatureAggregatorInterface {
    return new utils.Interface(_abi) as BLSSignatureAggregatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BLSSignatureAggregator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as BLSSignatureAggregator;
  }
}

export interface BLSSignatureAggregatorLibraryAddresses {
  ["contracts/samples/bls/lib/BLSOpen.sol:BLSOpen"]: string;
}
